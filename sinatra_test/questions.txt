BACKEND - Programming
These can be done in any language you're comfortable with

1. Give a regular expression that detects hexadecimal numbers in a text.
For example, ‘0x0f4’, ‘0acdadecf822eeff32aca5830e438cb54aa722e3’, ‘8BADF00D’ should be detected.

> text.match(/[0-9a-fA-F]+/)

2.Here is the pseudo code of a function that is defined recursively:
-  f(0) = 1;
-  f(1) = 3;
-  f(n)= 3 * f(n-1) - f(n-2);
Provide an implementation for ‘f’. Bonus points for a non recursive implementation.

>
def fib_non_recursive(index)
    first, second = 0, 1
    index.times do
      third = first + second
      first, second = second, third
    end
    first
end

BACKEND - MySQL

1. Write a CREATE TABLE query for a table storing information on users. It will store:
  - id,
  - firstname,
  - lastname,
  - gender,
  - email,
  - created_at

>

CREATE TABLE users_information(
   id INT NOT NULL AUTO_INCREMENT,
   firstname VARCHAR(100) NOT NULL,
   lastname VARCHAR(100) NOT NULL,
   gender VARCHAR(40) NOT NULL,
   email VARCHAR(100) NOT NULL,
   created_at DATE,
   PRIMARY KEY ( id )
);

2. Write a query on the previous table that lists the 10 most recently added users.

> SELECT * FROM users_information ORDER BY id DESC limit 10;

GENERAL - Creativity
Si vous êtes Français, vous pouvez répondre en Français.

1. Describe the color yellow to someone who is blind

> Couleur pres des infrarougres. Complexite due a sa comparison avec la chaleur du soleil ainsi que l'acidite du citron

3. Describe the data model you’d use for a Battleship game. What are the key objects? How will your code use them?

> Ajout de models tels que battleship, weapon or inventory.

class Battleship < ApplicationRecord
    has_many :inventories
    has_many :weapons, through: :inventories
end

class Inventory < ApplicationRecord
    belongs_to :battleship
    belongs_to :weapon
end

class Weapon < ApplicationRecord
    has_many :inventories
    has_many :battleships, through: :inventories
end
